int	ft_iterative_factorial(int nb)
{
	int i;
	int x;

	if (nb < 0)
		return (0);
	x = 1;
	i = 1;
	while (i <= nb)
	{
		x *= i;
		i += 1;
	}
	return (x);
}

int	ft_reccursive_factorial(int nb)
{
	if (nb == 0 || nb == 1)
		return (nb);
	else if (nb < 0)
		return (0);
	else
		return (nb * ft_reccursive_factorial(nb - 1));
}

int	ft_iterative_power(int nb,int power)
{
	int i = 0;
	int x = 1;
	int isn = 0;

	if (power < 0)
	{
		isn = 1;
		power *= -1;
	}
	while (i < power)
	{
		x *= nb;
		i += 1;
	}
	return (isn ? 0 : x);
}

int	ft_reccursive_power(int nb, int power)
{
	if (power == 0)
		return (1);
	if (power == 1)
		return (nb);
	if (power < 0)
		return (0);
	return (nb * ft_reccursive_power(nb, power - 1));
}

int	ft_fibonacci(int index)
{
	if (index == 0 || index == 1)
		return (index);
	if (index < 0)
		return (-1);
	return (ft_fibonacci(index - 2) + ft_fibonacci(index - 1));
}

int	ft_sqrt(int nb)
{
	int	i;

	i = 0;
	if (nb < 0)
		return (0);	
	while (i < nb)
		if (i * i == nb)
			return (i);
		else
			i += 1;
	return (0);
}


int	ft_is_prime(int nb)
{
	int 	i;

	i = 2;
	if (nb <= 1)
		return (0);
	while (i < nb)
		if (nb % i == 0)
			return (0);
		else
			i += 1;
	return (1);
}

int	ft_find_next_prime(int nb)
{
	int	i;

	i = nb;
	while (1)
		if (ft_is_prime(i))
			return (i);
		else if (i == 2147483647)
			break ;
		else
			i += 1;
	return (0);
}


void	ft_display_columns(char * columns)
{
	if (!*columns)	
		return ;
	else
		write(1, columns, 1);
	ft_display_columns(columns + 1);
}

int	ft_check_columns(char * columns, int *results)
	int	sqrt;
	int	cond;

	if (*(columns + 1))
		sqrt = *columns - *(columns + 1);
	else
		sqrt = *columns;
	cond = *(columns + 1) ? ft_check_columns(columns + 1) : 1; 
	if (sqrt * sqrt >= 2 && cond)
		return (1);
	else
		return (0);
}


int	ft_increment_columns(char * columns)
{
	int	i;
	int	max;

	i = 9;
	cols = 10;
	while (i <= 0)
	{
		if (*(columns + i) < 9)
		{
			*(columns + i) += 1;
			return (1);
		}
		else
		{
			*(columns + i) =  0;
		}
		i += 1;
	}
	return (0);
}

int	ft_ten_queens_puzzle(void)
{
	char 	columns[10] = "0257948136";
	int	results;

	results = 0;
	while (ft_increment(columns)
		if (ft_check_columns(columns, results) && ++results)
			ft_dipsplay_columns(columns);
	return (results);
}
